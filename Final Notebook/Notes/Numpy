NUMPY Importand Commands::

np.array([rows,col]) -- 1D array
np.array([[],[],[]]) -- 2D array
.shape
np.zeros(()) -- zero array
np.full((),num) -- full array
np.eye()
np.ones(())
np.rand.random(())

#Slicing
slice = an_array[:2,1:3]
slice[0,0] = 100 # when modify a slice , array gets modified.
slice[:,:] -- all rows and cols

zip(row,col) 
for r,c in zip(rows,cols):
	print(r,',',c)

filter = (an_array >15)
filter -- returns the boolean value .

an_array[an_array % 2 ==0] += 100   -- modifies with the result.
.dtype

np.array([[],[],[]], dtype = np.int)

np.add(x,y)
np.subtract(x,y)
np.multiply(x,y)
np.divide(x,y)
np.sqrt(x)
np.exp(x)

np.random.rand()
.mean()
.mean(axis = 1)  -- compute by row [0 for col]
.sum()
np.median(arr,axis = 1)

.sort()
np.unique(arr)
np.intersec1d(s,s1)
np.union1d(s,s1)
np.setdiff1d(s,s1)
np.in1d(s,s1)


add_cols = add_cols.T --- add across cols

#SpeedTest
from numpy import arange
from timeit import Timer

size = 1000000
timeits = 1000

timer_numpy = Timer("nd_array.sum()", "from __main__ import nd_array")
print("Time taken by numpy ndarray: %f seconds" % 
      (timer_numpy.timeit(timeits)/timeits))

timer_list = Timer("sum(a_list)", "from __main__ import a_list")
print("Time taken by list:  %f seconds" % 
      (timer_list.timeit(timeits)/timeits))  -- list



x = np.array([])
np.save('name',x)
np.load('name.npy')

np.savetxt('array.txt', X=x , delimeter=',')
cat array.txt

np.loadtxt('array.txt', delimeter = ',')

#dot product
np.dot(x,y)
x.dot(y)

ex = np.array([[],[]])
np.sum(ex)
np.sum(ex, axis=0) -- col wize  --[ 1 for row wise]

np.maximum(x,y)
np.arange(20)
.reshape(row,cols)

ex.T == transpose

filter = np.array([true,False,True])
np.where(filter,x,y)
np.where(mat > 0.5, 100, -1)
.any()
.all()

np.random.normal(size = (1,5))[0]
np.random.randint(low=2,high=50,size=4)
np.random.permutation(Z)
np.random.normal(size=4) 

#Merging
np.vstack((K,M))
np.htack((K,M))
np.concatenate([K, M], axis = 0)
np.concatenate([K, M.T], axis = 1)

